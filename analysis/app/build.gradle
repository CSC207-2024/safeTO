/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '2.5.4'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    flatDir {
        dirs 'lib/lib'}
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.5.4'
    implementation 'org.springframework.boot:spring-boot-devtools:2.5.4'
    implementation 'org.springframework:spring-context:5.3.9'
    implementation 'org.springframework:spring-webmvc:5.3.9'
    implementation 'org.springframework:spring-web:5.3.9'
    implementation 'org.springframework:spring-core:5.3.9'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.4'
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'tech.tablesaw:tablesaw-core:0.43.1'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.jfree:jfreechart:1.5.5'
    implementation 'org.jfree:jfreesvg:3.4.3'

    implementation files('lib/lib/guava-30.0-jre.jar')
    implementation files('lib/lib/junit-jupiter-5.8.1.jar')
    implementation files('lib/lib/junit-jupiter-api-5.8.1.jar')
    implementation files('lib/lib/junit-jupiter-engine-5.8.1.jar')
    implementation files('lib/lib/junit-jupiter-params-5.8.1.jar')
    implementation files('lib/lib/junit-platform-commons-1.8.1.jar')
    implementation files('lib/lib/junit-platform-engine-1.8.1.jar')
    implementation files('lib/lib/opentest4j-1.2.0.jar')
    implementation files('lib/lib/slf4j-api-1.7.30.jar')
    implementation files('lib/lib/mockito-core-5.12.0.jar')
}

application {
    mainClass = 'analysis.App'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Custom configuration for creating an Uber JAR
jar {
    archiveFileName.set('analysis.jar')
    manifest {
        attributes(
            'Main-Class': application.mainClass.get()
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
